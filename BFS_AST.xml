<!-- AST generation execution time: 3 ms -->
<CompilationUnitSyntax>
  <UsingDirectiveSyntax>
    <Token>using</Token>
    <IdentifierNameSyntax>
      <Token>System</Token>
    </IdentifierNameSyntax>
    <Token>;</Token>
  </UsingDirectiveSyntax>
  <UsingDirectiveSyntax>
    <Token>using</Token>
    <QualifiedNameSyntax>
      <QualifiedNameSyntax>
        <IdentifierNameSyntax>
          <Token>System</Token>
        </IdentifierNameSyntax>
        <Token>.</Token>
        <IdentifierNameSyntax>
          <Token>Collections</Token>
        </IdentifierNameSyntax>
      </QualifiedNameSyntax>
      <Token>.</Token>
      <IdentifierNameSyntax>
        <Token>Generic</Token>
      </IdentifierNameSyntax>
    </QualifiedNameSyntax>
    <Token>;</Token>
  </UsingDirectiveSyntax>
  <ClassDeclarationSyntax>
    <Token>public</Token>
    <Token>class</Token>
    <Token>Graph</Token>
    <Token>{</Token>
    <FieldDeclarationSyntax>
      <Token>private</Token>
      <VariableDeclarationSyntax>
        <GenericNameSyntax>
          <Token>Dictionary</Token>
          <TypeArgumentListSyntax>
            <Token>&lt;</Token>
            <PredefinedTypeSyntax>
              <Token>int</Token>
            </PredefinedTypeSyntax>
            <Token>,</Token>
            <GenericNameSyntax>
              <Token>List</Token>
              <TypeArgumentListSyntax>
                <Token>&lt;</Token>
                <PredefinedTypeSyntax>
                  <Token>int</Token>
                </PredefinedTypeSyntax>
                <Token>&gt;</Token>
              </TypeArgumentListSyntax>
            </GenericNameSyntax>
            <Token>&gt;</Token>
          </TypeArgumentListSyntax>
        </GenericNameSyntax>
        <VariableDeclaratorSyntax>
          <Token>adjList</Token>
          <EqualsValueClauseSyntax>
            <Token>=</Token>
            <ObjectCreationExpressionSyntax>
              <Token>new</Token>
              <GenericNameSyntax>
                <Token>Dictionary</Token>
                <TypeArgumentListSyntax>
                  <Token>&lt;</Token>
                  <PredefinedTypeSyntax>
                    <Token>int</Token>
                  </PredefinedTypeSyntax>
                  <Token>,</Token>
                  <GenericNameSyntax>
                    <Token>List</Token>
                    <TypeArgumentListSyntax>
                      <Token>&lt;</Token>
                      <PredefinedTypeSyntax>
                        <Token>int</Token>
                      </PredefinedTypeSyntax>
                      <Token>&gt;</Token>
                    </TypeArgumentListSyntax>
                  </GenericNameSyntax>
                  <Token>&gt;</Token>
                </TypeArgumentListSyntax>
              </GenericNameSyntax>
              <ArgumentListSyntax>
                <Token>(</Token>
                <Token>)</Token>
              </ArgumentListSyntax>
            </ObjectCreationExpressionSyntax>
          </EqualsValueClauseSyntax>
        </VariableDeclaratorSyntax>
      </VariableDeclarationSyntax>
      <Token>;</Token>
    </FieldDeclarationSyntax>
    <MethodDeclarationSyntax>
      <Token>public</Token>
      <PredefinedTypeSyntax>
        <Token>void</Token>
      </PredefinedTypeSyntax>
      <Token>AddEdge</Token>
      <ParameterListSyntax>
        <Token>(</Token>
        <ParameterSyntax>
          <PredefinedTypeSyntax>
            <Token>int</Token>
          </PredefinedTypeSyntax>
          <Token>u</Token>
        </ParameterSyntax>
        <Token>,</Token>
        <ParameterSyntax>
          <PredefinedTypeSyntax>
            <Token>int</Token>
          </PredefinedTypeSyntax>
          <Token>v</Token>
        </ParameterSyntax>
        <Token>)</Token>
      </ParameterListSyntax>
      <BlockSyntax>
        <Token>{</Token>
        <IfStatementSyntax>
          <Token>if</Token>
          <Token>(</Token>
          <PrefixUnaryExpressionSyntax>
            <Token>!</Token>
            <InvocationExpressionSyntax>
              <MemberAccessExpressionSyntax>
                <IdentifierNameSyntax>
                  <Token>adjList</Token>
                </IdentifierNameSyntax>
                <Token>.</Token>
                <IdentifierNameSyntax>
                  <Token>ContainsKey</Token>
                </IdentifierNameSyntax>
              </MemberAccessExpressionSyntax>
              <ArgumentListSyntax>
                <Token>(</Token>
                <ArgumentSyntax>
                  <IdentifierNameSyntax>
                    <Token>u</Token>
                  </IdentifierNameSyntax>
                </ArgumentSyntax>
                <Token>)</Token>
              </ArgumentListSyntax>
            </InvocationExpressionSyntax>
          </PrefixUnaryExpressionSyntax>
          <Token>)</Token>
          <ExpressionStatementSyntax>
            <AssignmentExpressionSyntax>
              <ElementAccessExpressionSyntax>
                <IdentifierNameSyntax>
                  <Token>adjList</Token>
                </IdentifierNameSyntax>
                <BracketedArgumentListSyntax>
                  <Token>[</Token>
                  <ArgumentSyntax>
                    <IdentifierNameSyntax>
                      <Token>u</Token>
                    </IdentifierNameSyntax>
                  </ArgumentSyntax>
                  <Token>]</Token>
                </BracketedArgumentListSyntax>
              </ElementAccessExpressionSyntax>
              <Token>=</Token>
              <ObjectCreationExpressionSyntax>
                <Token>new</Token>
                <GenericNameSyntax>
                  <Token>List</Token>
                  <TypeArgumentListSyntax>
                    <Token>&lt;</Token>
                    <PredefinedTypeSyntax>
                      <Token>int</Token>
                    </PredefinedTypeSyntax>
                    <Token>&gt;</Token>
                  </TypeArgumentListSyntax>
                </GenericNameSyntax>
                <ArgumentListSyntax>
                  <Token>(</Token>
                  <Token>)</Token>
                </ArgumentListSyntax>
              </ObjectCreationExpressionSyntax>
            </AssignmentExpressionSyntax>
            <Token>;</Token>
          </ExpressionStatementSyntax>
        </IfStatementSyntax>
        <IfStatementSyntax>
          <Token>if</Token>
          <Token>(</Token>
          <PrefixUnaryExpressionSyntax>
            <Token>!</Token>
            <InvocationExpressionSyntax>
              <MemberAccessExpressionSyntax>
                <IdentifierNameSyntax>
                  <Token>adjList</Token>
                </IdentifierNameSyntax>
                <Token>.</Token>
                <IdentifierNameSyntax>
                  <Token>ContainsKey</Token>
                </IdentifierNameSyntax>
              </MemberAccessExpressionSyntax>
              <ArgumentListSyntax>
                <Token>(</Token>
                <ArgumentSyntax>
                  <IdentifierNameSyntax>
                    <Token>v</Token>
                  </IdentifierNameSyntax>
                </ArgumentSyntax>
                <Token>)</Token>
              </ArgumentListSyntax>
            </InvocationExpressionSyntax>
          </PrefixUnaryExpressionSyntax>
          <Token>)</Token>
          <ExpressionStatementSyntax>
            <AssignmentExpressionSyntax>
              <ElementAccessExpressionSyntax>
                <IdentifierNameSyntax>
                  <Token>adjList</Token>
                </IdentifierNameSyntax>
                <BracketedArgumentListSyntax>
                  <Token>[</Token>
                  <ArgumentSyntax>
                    <IdentifierNameSyntax>
                      <Token>v</Token>
                    </IdentifierNameSyntax>
                  </ArgumentSyntax>
                  <Token>]</Token>
                </BracketedArgumentListSyntax>
              </ElementAccessExpressionSyntax>
              <Token>=</Token>
              <ObjectCreationExpressionSyntax>
                <Token>new</Token>
                <GenericNameSyntax>
                  <Token>List</Token>
                  <TypeArgumentListSyntax>
                    <Token>&lt;</Token>
                    <PredefinedTypeSyntax>
                      <Token>int</Token>
                    </PredefinedTypeSyntax>
                    <Token>&gt;</Token>
                  </TypeArgumentListSyntax>
                </GenericNameSyntax>
                <ArgumentListSyntax>
                  <Token>(</Token>
                  <Token>)</Token>
                </ArgumentListSyntax>
              </ObjectCreationExpressionSyntax>
            </AssignmentExpressionSyntax>
            <Token>;</Token>
          </ExpressionStatementSyntax>
        </IfStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <ElementAccessExpressionSyntax>
                <IdentifierNameSyntax>
                  <Token>adjList</Token>
                </IdentifierNameSyntax>
                <BracketedArgumentListSyntax>
                  <Token>[</Token>
                  <ArgumentSyntax>
                    <IdentifierNameSyntax>
                      <Token>u</Token>
                    </IdentifierNameSyntax>
                  </ArgumentSyntax>
                  <Token>]</Token>
                </BracketedArgumentListSyntax>
              </ElementAccessExpressionSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>Add</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <IdentifierNameSyntax>
                  <Token>v</Token>
                </IdentifierNameSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <ElementAccessExpressionSyntax>
                <IdentifierNameSyntax>
                  <Token>adjList</Token>
                </IdentifierNameSyntax>
                <BracketedArgumentListSyntax>
                  <Token>[</Token>
                  <ArgumentSyntax>
                    <IdentifierNameSyntax>
                      <Token>v</Token>
                    </IdentifierNameSyntax>
                  </ArgumentSyntax>
                  <Token>]</Token>
                </BracketedArgumentListSyntax>
              </ElementAccessExpressionSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>Add</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <IdentifierNameSyntax>
                  <Token>u</Token>
                </IdentifierNameSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <Token>}</Token>
      </BlockSyntax>
    </MethodDeclarationSyntax>
    <MethodDeclarationSyntax>
      <Token>public</Token>
      <PredefinedTypeSyntax>
        <Token>void</Token>
      </PredefinedTypeSyntax>
      <Token>BFS</Token>
      <ParameterListSyntax>
        <Token>(</Token>
        <ParameterSyntax>
          <PredefinedTypeSyntax>
            <Token>int</Token>
          </PredefinedTypeSyntax>
          <Token>start</Token>
        </ParameterSyntax>
        <Token>)</Token>
      </ParameterListSyntax>
      <BlockSyntax>
        <Token>{</Token>
        <LocalDeclarationStatementSyntax>
          <VariableDeclarationSyntax>
            <GenericNameSyntax>
              <Token>HashSet</Token>
              <TypeArgumentListSyntax>
                <Token>&lt;</Token>
                <PredefinedTypeSyntax>
                  <Token>int</Token>
                </PredefinedTypeSyntax>
                <Token>&gt;</Token>
              </TypeArgumentListSyntax>
            </GenericNameSyntax>
            <VariableDeclaratorSyntax>
              <Token>visited</Token>
              <EqualsValueClauseSyntax>
                <Token>=</Token>
                <ObjectCreationExpressionSyntax>
                  <Token>new</Token>
                  <GenericNameSyntax>
                    <Token>HashSet</Token>
                    <TypeArgumentListSyntax>
                      <Token>&lt;</Token>
                      <PredefinedTypeSyntax>
                        <Token>int</Token>
                      </PredefinedTypeSyntax>
                      <Token>&gt;</Token>
                    </TypeArgumentListSyntax>
                  </GenericNameSyntax>
                  <ArgumentListSyntax>
                    <Token>(</Token>
                    <Token>)</Token>
                  </ArgumentListSyntax>
                </ObjectCreationExpressionSyntax>
              </EqualsValueClauseSyntax>
            </VariableDeclaratorSyntax>
          </VariableDeclarationSyntax>
          <Token>;</Token>
        </LocalDeclarationStatementSyntax>
        <LocalDeclarationStatementSyntax>
          <VariableDeclarationSyntax>
            <GenericNameSyntax>
              <Token>Queue</Token>
              <TypeArgumentListSyntax>
                <Token>&lt;</Token>
                <PredefinedTypeSyntax>
                  <Token>int</Token>
                </PredefinedTypeSyntax>
                <Token>&gt;</Token>
              </TypeArgumentListSyntax>
            </GenericNameSyntax>
            <VariableDeclaratorSyntax>
              <Token>queue</Token>
              <EqualsValueClauseSyntax>
                <Token>=</Token>
                <ObjectCreationExpressionSyntax>
                  <Token>new</Token>
                  <GenericNameSyntax>
                    <Token>Queue</Token>
                    <TypeArgumentListSyntax>
                      <Token>&lt;</Token>
                      <PredefinedTypeSyntax>
                        <Token>int</Token>
                      </PredefinedTypeSyntax>
                      <Token>&gt;</Token>
                    </TypeArgumentListSyntax>
                  </GenericNameSyntax>
                  <ArgumentListSyntax>
                    <Token>(</Token>
                    <Token>)</Token>
                  </ArgumentListSyntax>
                </ObjectCreationExpressionSyntax>
              </EqualsValueClauseSyntax>
            </VariableDeclaratorSyntax>
          </VariableDeclarationSyntax>
          <Token>;</Token>
        </LocalDeclarationStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>queue</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>Enqueue</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <IdentifierNameSyntax>
                  <Token>start</Token>
                </IdentifierNameSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>visited</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>Add</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <IdentifierNameSyntax>
                  <Token>start</Token>
                </IdentifierNameSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <WhileStatementSyntax>
          <Token>while</Token>
          <Token>(</Token>
          <BinaryExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>queue</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>Count</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <Token>&gt;</Token>
            <LiteralExpressionSyntax>
              <Token>0</Token>
            </LiteralExpressionSyntax>
          </BinaryExpressionSyntax>
          <Token>)</Token>
          <BlockSyntax>
            <Token>{</Token>
            <LocalDeclarationStatementSyntax>
              <VariableDeclarationSyntax>
                <PredefinedTypeSyntax>
                  <Token>int</Token>
                </PredefinedTypeSyntax>
                <VariableDeclaratorSyntax>
                  <Token>node</Token>
                  <EqualsValueClauseSyntax>
                    <Token>=</Token>
                    <InvocationExpressionSyntax>
                      <MemberAccessExpressionSyntax>
                        <IdentifierNameSyntax>
                          <Token>queue</Token>
                        </IdentifierNameSyntax>
                        <Token>.</Token>
                        <IdentifierNameSyntax>
                          <Token>Dequeue</Token>
                        </IdentifierNameSyntax>
                      </MemberAccessExpressionSyntax>
                      <ArgumentListSyntax>
                        <Token>(</Token>
                        <Token>)</Token>
                      </ArgumentListSyntax>
                    </InvocationExpressionSyntax>
                  </EqualsValueClauseSyntax>
                </VariableDeclaratorSyntax>
              </VariableDeclarationSyntax>
              <Token>;</Token>
            </LocalDeclarationStatementSyntax>
            <ExpressionStatementSyntax>
              <InvocationExpressionSyntax>
                <MemberAccessExpressionSyntax>
                  <IdentifierNameSyntax>
                    <Token>Console</Token>
                  </IdentifierNameSyntax>
                  <Token>.</Token>
                  <IdentifierNameSyntax>
                    <Token>WriteLine</Token>
                  </IdentifierNameSyntax>
                </MemberAccessExpressionSyntax>
                <ArgumentListSyntax>
                  <Token>(</Token>
                  <ArgumentSyntax>
                    <InterpolatedStringExpressionSyntax>
                      <Token>$"</Token>
                      <InterpolatedStringTextSyntax>
                        <Token>Visited: </Token>
                      </InterpolatedStringTextSyntax>
                      <InterpolationSyntax>
                        <Token>{</Token>
                        <IdentifierNameSyntax>
                          <Token>node</Token>
                        </IdentifierNameSyntax>
                        <Token>}</Token>
                      </InterpolationSyntax>
                      <Token>"</Token>
                    </InterpolatedStringExpressionSyntax>
                  </ArgumentSyntax>
                  <Token>)</Token>
                </ArgumentListSyntax>
              </InvocationExpressionSyntax>
              <Token>;</Token>
            </ExpressionStatementSyntax>
            <IfStatementSyntax>
              <Token>if</Token>
              <Token>(</Token>
              <InvocationExpressionSyntax>
                <MemberAccessExpressionSyntax>
                  <IdentifierNameSyntax>
                    <Token>adjList</Token>
                  </IdentifierNameSyntax>
                  <Token>.</Token>
                  <IdentifierNameSyntax>
                    <Token>ContainsKey</Token>
                  </IdentifierNameSyntax>
                </MemberAccessExpressionSyntax>
                <ArgumentListSyntax>
                  <Token>(</Token>
                  <ArgumentSyntax>
                    <IdentifierNameSyntax>
                      <Token>node</Token>
                    </IdentifierNameSyntax>
                  </ArgumentSyntax>
                  <Token>)</Token>
                </ArgumentListSyntax>
              </InvocationExpressionSyntax>
              <Token>)</Token>
              <BlockSyntax>
                <Token>{</Token>
                <ForEachStatementSyntax>
                  <Token>foreach</Token>
                  <Token>(</Token>
                  <PredefinedTypeSyntax>
                    <Token>int</Token>
                  </PredefinedTypeSyntax>
                  <Token>neighbor</Token>
                  <Token>in</Token>
                  <ElementAccessExpressionSyntax>
                    <IdentifierNameSyntax>
                      <Token>adjList</Token>
                    </IdentifierNameSyntax>
                    <BracketedArgumentListSyntax>
                      <Token>[</Token>
                      <ArgumentSyntax>
                        <IdentifierNameSyntax>
                          <Token>node</Token>
                        </IdentifierNameSyntax>
                      </ArgumentSyntax>
                      <Token>]</Token>
                    </BracketedArgumentListSyntax>
                  </ElementAccessExpressionSyntax>
                  <Token>)</Token>
                  <BlockSyntax>
                    <Token>{</Token>
                    <IfStatementSyntax>
                      <Token>if</Token>
                      <Token>(</Token>
                      <PrefixUnaryExpressionSyntax>
                        <Token>!</Token>
                        <InvocationExpressionSyntax>
                          <MemberAccessExpressionSyntax>
                            <IdentifierNameSyntax>
                              <Token>visited</Token>
                            </IdentifierNameSyntax>
                            <Token>.</Token>
                            <IdentifierNameSyntax>
                              <Token>Contains</Token>
                            </IdentifierNameSyntax>
                          </MemberAccessExpressionSyntax>
                          <ArgumentListSyntax>
                            <Token>(</Token>
                            <ArgumentSyntax>
                              <IdentifierNameSyntax>
                                <Token>neighbor</Token>
                              </IdentifierNameSyntax>
                            </ArgumentSyntax>
                            <Token>)</Token>
                          </ArgumentListSyntax>
                        </InvocationExpressionSyntax>
                      </PrefixUnaryExpressionSyntax>
                      <Token>)</Token>
                      <BlockSyntax>
                        <Token>{</Token>
                        <ExpressionStatementSyntax>
                          <InvocationExpressionSyntax>
                            <MemberAccessExpressionSyntax>
                              <IdentifierNameSyntax>
                                <Token>visited</Token>
                              </IdentifierNameSyntax>
                              <Token>.</Token>
                              <IdentifierNameSyntax>
                                <Token>Add</Token>
                              </IdentifierNameSyntax>
                            </MemberAccessExpressionSyntax>
                            <ArgumentListSyntax>
                              <Token>(</Token>
                              <ArgumentSyntax>
                                <IdentifierNameSyntax>
                                  <Token>neighbor</Token>
                                </IdentifierNameSyntax>
                              </ArgumentSyntax>
                              <Token>)</Token>
                            </ArgumentListSyntax>
                          </InvocationExpressionSyntax>
                          <Token>;</Token>
                        </ExpressionStatementSyntax>
                        <ExpressionStatementSyntax>
                          <InvocationExpressionSyntax>
                            <MemberAccessExpressionSyntax>
                              <IdentifierNameSyntax>
                                <Token>queue</Token>
                              </IdentifierNameSyntax>
                              <Token>.</Token>
                              <IdentifierNameSyntax>
                                <Token>Enqueue</Token>
                              </IdentifierNameSyntax>
                            </MemberAccessExpressionSyntax>
                            <ArgumentListSyntax>
                              <Token>(</Token>
                              <ArgumentSyntax>
                                <IdentifierNameSyntax>
                                  <Token>neighbor</Token>
                                </IdentifierNameSyntax>
                              </ArgumentSyntax>
                              <Token>)</Token>
                            </ArgumentListSyntax>
                          </InvocationExpressionSyntax>
                          <Token>;</Token>
                        </ExpressionStatementSyntax>
                        <Token>}</Token>
                      </BlockSyntax>
                    </IfStatementSyntax>
                    <Token>}</Token>
                  </BlockSyntax>
                </ForEachStatementSyntax>
                <Token>}</Token>
              </BlockSyntax>
            </IfStatementSyntax>
            <Token>}</Token>
          </BlockSyntax>
        </WhileStatementSyntax>
        <Token>}</Token>
      </BlockSyntax>
    </MethodDeclarationSyntax>
    <Token>}</Token>
  </ClassDeclarationSyntax>
  <ClassDeclarationSyntax>
    <Token>class</Token>
    <Token>Program</Token>
    <Token>{</Token>
    <MethodDeclarationSyntax>
      <Token>static</Token>
      <PredefinedTypeSyntax>
        <Token>void</Token>
      </PredefinedTypeSyntax>
      <Token>Main</Token>
      <ParameterListSyntax>
        <Token>(</Token>
        <ParameterSyntax>
          <ArrayTypeSyntax>
            <PredefinedTypeSyntax>
              <Token>string</Token>
            </PredefinedTypeSyntax>
            <ArrayRankSpecifierSyntax>
              <Token>[</Token>
              <OmittedArraySizeExpressionSyntax>
                <Token></Token>
              </OmittedArraySizeExpressionSyntax>
              <Token>]</Token>
            </ArrayRankSpecifierSyntax>
          </ArrayTypeSyntax>
          <Token>args</Token>
        </ParameterSyntax>
        <Token>)</Token>
      </ParameterListSyntax>
      <BlockSyntax>
        <Token>{</Token>
        <LocalDeclarationStatementSyntax>
          <VariableDeclarationSyntax>
            <IdentifierNameSyntax>
              <Token>Graph</Token>
            </IdentifierNameSyntax>
            <VariableDeclaratorSyntax>
              <Token>g</Token>
              <EqualsValueClauseSyntax>
                <Token>=</Token>
                <ObjectCreationExpressionSyntax>
                  <Token>new</Token>
                  <IdentifierNameSyntax>
                    <Token>Graph</Token>
                  </IdentifierNameSyntax>
                  <ArgumentListSyntax>
                    <Token>(</Token>
                    <Token>)</Token>
                  </ArgumentListSyntax>
                </ObjectCreationExpressionSyntax>
              </EqualsValueClauseSyntax>
            </VariableDeclaratorSyntax>
          </VariableDeclarationSyntax>
          <Token>;</Token>
        </LocalDeclarationStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>AddEdge</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>0</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>,</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>1</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>AddEdge</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>0</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>,</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>2</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>AddEdge</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>1</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>,</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>3</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>AddEdge</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>1</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>,</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>4</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>AddEdge</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>2</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>,</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>5</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>AddEdge</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>2</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>,</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>6</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>Console</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>WriteLine</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>"BFS Traversal:"</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <ExpressionStatementSyntax>
          <InvocationExpressionSyntax>
            <MemberAccessExpressionSyntax>
              <IdentifierNameSyntax>
                <Token>g</Token>
              </IdentifierNameSyntax>
              <Token>.</Token>
              <IdentifierNameSyntax>
                <Token>BFS</Token>
              </IdentifierNameSyntax>
            </MemberAccessExpressionSyntax>
            <ArgumentListSyntax>
              <Token>(</Token>
              <ArgumentSyntax>
                <LiteralExpressionSyntax>
                  <Token>0</Token>
                </LiteralExpressionSyntax>
              </ArgumentSyntax>
              <Token>)</Token>
            </ArgumentListSyntax>
          </InvocationExpressionSyntax>
          <Token>;</Token>
        </ExpressionStatementSyntax>
        <Token>}</Token>
      </BlockSyntax>
    </MethodDeclarationSyntax>
    <Token>}</Token>
  </ClassDeclarationSyntax>
  <Token></Token>
</CompilationUnitSyntax>